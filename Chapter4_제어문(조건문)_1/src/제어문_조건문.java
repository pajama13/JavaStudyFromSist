

/*

[조건문] 136p
-프로그램은 코딩 순서대로 순차적으로 수행
-필요 시에는 건너뛰고(조건문), 같은 문장일 경우에는 반복해서 수행(반복문) -> 제어(제어문)
-제어문 종류
 1) 조건문 종류
  *조건에 쓰이는 연산자 : 부정연산자(!), 비교연산자(==,!=,>,<등), 논리연산자(&&, ||)
  -단일조건문
    형식 : if (조건) {조건이 true면 수행} if (!조건) {조건이 false면 수행}
    ->독립적인 문장
    ->오류 체크, 예외처리(코테에서 중요)
      ex 점수를 입력 받아 총점, 평균 내기
         점수 입력 범위 지정하기 : if(kor>=0 && kor<=100)
  -선택조건문
   사용예시 : 짝수/홀수, 대문자/소문자, 로그인여부, ID중복 확인
   형식 : if(조건){true면 수행}else{false면 수행}
  -다중조건문
  

다른 폴더 클래스 쓸 때 : import 패키지(폴더명.폴더명.클래스명)

jsoup 다운 받기 :
자바 프로젝트 파일 우클릭 빌드 패스, 컴피그빌드 패스, 탭을 라이브러리로 변경, 클래스패스 클릭, 우측 익스터널 jar에서 다운 받은 파일 클릭, 적용

조건식 작성 예시
 1) 90 이상 ~ 100이하
    num>=90 && num<=100
 2) 0보다 작고 100보다 큼
    num<0 || num>100
 3) y인지 Y인지
 	num=='y' || num=='Y' (비교연산자 : 정수, 실수, 논리, 문자)
	문자열 (equals) -> id, pwd(로그인 처리)


단일조건문은 중복적으로 처리할 때 자주 사용
if문 많이 사용하면 속도가 느려짐(빠져나가게 해줘야 함)


스캐너 단점 : 문자 입력 불가(문자열만 가능) -> 해결방법 : charAt(0) 써서 문자 하나만 가져오기


if문 조건에는 true/false만 들어감


[다중조건문] 141p
-여러 조건문 중 해당되는 1개만 수행 후 빠져나감
-형식 :
 if(조건){조건 true면 수행 후 종료} else if(조건){조건 true면 수행 후 종료}else(){}
 (마지막 else는 생략 가능)


여러 개 동시 출력 -> 단일 조건문 사용 : ex  1~100까지의 정수 중 3, 5, 7의 배수를 출력하기
1개만 출력 -> 다중 조건문 사용 : ex 키보드 입력에 따른 출력

둘 중 하나를 가져오라는 문제는 if/else 사용


if~else를 줄여서 쓸 땐, 3항 연산자 사용 (조건?A:B)


System.exit(0) : 프로그램 종료 시 사용

 */


import java.util.Scanner;

public class 제어문_조건문 {

	public static void main(String[] args) {
		
		// 사용자로부터 정수를 받아 홀수/짝수 확인하기
		Scanner scan = new Scanner(System.in);
		// new 클래스를 메모리에 저장
		// System.in 키보드에 입력
		
		System.out.println("정수 입력:");
		
		int num=scan.nextInt(); //
		if(num%2==0)
			System.out.println(num+"는(은) 짝수입니다.");
		if(num%2!=0)
			System.out.println(num+"는(은) 홀수입니다.");
		
		scan.close();
		}
}
